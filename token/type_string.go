// Code generated by "stringer -type Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SingleCharacterTokenStart-0]
	_ = x[LeftParen-1]
	_ = x[RightParen-2]
	_ = x[LeftSquare-3]
	_ = x[RightSquare-4]
	_ = x[LeftBrace-5]
	_ = x[RightBrace-6]
	_ = x[Comma-7]
	_ = x[Dot-8]
	_ = x[Minus-9]
	_ = x[Plus-10]
	_ = x[Semicolon-11]
	_ = x[Slash-12]
	_ = x[Star-13]
	_ = x[SingleCharacterTokenEnd-14]
	_ = x[OneOrTwoCharacterTokenStart-15]
	_ = x[Bang-16]
	_ = x[BangEqual-17]
	_ = x[Equal-18]
	_ = x[EqualEqual-19]
	_ = x[Greater-20]
	_ = x[GreaterEqual-21]
	_ = x[Less-22]
	_ = x[LessEqual-23]
	_ = x[OneOrTwoCharacterTokenEnd-24]
	_ = x[LiteralStart-25]
	_ = x[Identifier-26]
	_ = x[String-27]
	_ = x[Number-28]
	_ = x[LiteralEnd-29]
	_ = x[KeywordStart-30]
	_ = x[And-31]
	_ = x[Class-32]
	_ = x[Else-33]
	_ = x[False-34]
	_ = x[Fun-35]
	_ = x[For-36]
	_ = x[If-37]
	_ = x[Nil-38]
	_ = x[Or-39]
	_ = x[Print-40]
	_ = x[Return-41]
	_ = x[Super-42]
	_ = x[This-43]
	_ = x[True-44]
	_ = x[Var-45]
	_ = x[While-46]
	_ = x[Require-47]
	_ = x[KeywordEnd-48]
	_ = x[EOF-49]
}

const _Type_name = "SingleCharacterTokenStartLeftParenRightParenLeftSquareRightSquareLeftBraceRightBraceCommaDotMinusPlusSemicolonSlashStarSingleCharacterTokenEndOneOrTwoCharacterTokenStartBangBangEqualEqualEqualEqualGreaterGreaterEqualLessLessEqualOneOrTwoCharacterTokenEndLiteralStartIdentifierStringNumberLiteralEndKeywordStartAndClassElseFalseFunForIfNilOrPrintReturnSuperThisTrueVarWhileRequireKeywordEndEOF"

var _Type_index = [...]uint16{0, 25, 34, 44, 54, 65, 74, 84, 89, 92, 97, 101, 110, 115, 119, 142, 169, 173, 182, 187, 197, 204, 216, 220, 229, 254, 266, 276, 282, 288, 298, 310, 313, 318, 322, 327, 330, 333, 335, 338, 340, 345, 351, 356, 360, 364, 367, 372, 379, 389, 392}

func (i Type) String() string {
	if i < 0 || i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
